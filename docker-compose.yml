version: "2"

networks:
  bridge:

services:

  #############################################################################################
  # Kafka and Kafka UI
  #############################################################################################
  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # Listener settings
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      # Other settings
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2
    networks:
      - bridge

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    volumes:
      - "./mount_tools/kafka_ui/config.yml:/etc/kafkaui/dynamic_config.yaml"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
      - kafka
    networks:
      - bridge

  #############################################################################################
  # Spark
  #############################################################################################
  spark-master:
    image: docker.io/bitnami/spark:3.3
    container_name: spark 
    ports:
      - "8888:8888"
      - "7077:7077"
    volumes:
      - ./:/app/
    environment:
      - SPARK_MASTER_WEBUI_PORT=8888
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    depends_on:
      - kafka
    networks:
      - bridge

  spark-submit:
    image: docker.io/bitnami/spark:3.3
    container_name: spark_submit
    volumes:
      - ./:/app/
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    command: 
      - "sh"
      - "-c"
      - |
        pip install -r /app/consumers/requirements.txt
        spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.3 /app/consumers/spark_stream_consumer.py
    depends_on:
      - spark-master
    networks:
      - bridge

  spark-worker-1:
    image: docker.io/bitnami/spark:3.3
    container_name: spark_worker_1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    depends_on:
      - spark-master
    networks:
      - bridge

  spark-worker-2:
    image: docker.io/bitnami/spark:3.3
    container_name: spark_worker_2
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    networks:
      - bridge

  #############################################################################################  
  # Postgresql
  #############################################################################################
  postgresql:
      image: docker.io/bitnami/postgresql
      container_name: postgresql
      ports:
        - "5432:5432"
      volumes:
        - "postgresql_data:/bitnami/postgresql"
      environment:
        - POSTGRESQL_POSTGRES_PASSWORD=admin
        - POSTGRESQL_USERNAME=${POSTGRES_USER}
        - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRESQL_DATABASE=${POSTGRES_DB}
      networks:
        - bridge

  #############################################################################################
  # InfluxDB
  #############################################################################################
  influxdb:
    image: docker.io/influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - "influxdb_data:/var/lib/influxdb2"
      - "./mount_tools/influxdb/config.yml:/etc/influxdb2/config.yml"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUX_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
    networks:
      - bridge

  #############################################################################################
  # Stock Producer
  #############################################################################################
  stock-producer:
    image: stock-producer
    container_name: stock-producer
    build: .
    ports:
     - "5000:5000"
    volumes:
      - ./:/app/
    networks:
     - bridge
    depends_on:
      - kafka

volumes:

  kafka_data:
    driver: local

  postgresql_data:
    driver: local

  influxdb_data:
    driver: local